{"version":3,"sources":["components/User/User.tsx","components/Post/Post.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/PostList/PostList.tsx","components/getData/getData.ts","App.tsx","index.tsx"],"names":["User","props","user","name","email","address","street","suite","city","zipcode","geo","lat","lng","className","Post","post","title","body","Comment","comment","CommentList","comments","map","key","id","PostList","posts","getData","url","a","fetch","response","json","getPostsWithUsersAndComments","users","commentsToPost","find","person","userId","filter","message","postId","App","useState","setPosts","originalPosts","setOriginalPosts","isLoading","setIsLoading","text","setText","handleStart","postsFromServer","useMemo","toLowerCase","includes","length","onSubmit","event","preventDefault","placeholder","onChange","target","value","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.403e82e5.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\nexport const User: FC<Props> = (props) => {\n  const { user } = props;\n  const { name, email, address } = user;\n  const {\n    street,\n    suite,\n    city,\n    zipcode,\n    geo,\n  } = address;\n  const { lat, lng } = geo;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <p className=\"title\">\n          {name}\n        </p>\n        <p className=\"subtitle title\">\n          {email}\n        </p>\n      </div>\n      <footer className=\"card-footer\">\n        <p className=\"card-footer-item\">\n          <span>\n            {`${street}, ${suite} ${city}`}\n          </span>\n        </p>\n        <p className=\"card-footer-item\">\n          <span>\n            {`${zipcode}, ${lat}, ${lng}`}\n          </span>\n        </p>\n      </footer>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  post: PostWithUserAndComment;\n}\n\nexport const Post: FC<Props> = (props) => {\n  const { post } = props;\n  const { title, body } = post;\n\n  return (\n    <div className=\"posts\">\n      <h2 className=\"subtitle is-4\">{title}</h2>\n      <p className=\"subtitle is-5\">{body}</p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: FC<Props> = (props) => {\n  const { comment } = props;\n  const { name, body, email } = comment;\n\n  return (\n    <article className=\"message is-dark\">\n      <div className=\"message-header\">\n        <p>{name}</p>\n      </div>\n      <div className=\"message-body\">\n        <p>{body}</p>\n        <strong>{email}</strong>\n      </div>\n    </article>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: FC<Props> = (props) => {\n  const { comments } = props;\n\n  return (\n    <div className=\"content comment-list\">\n      <div>\n        {comments.map(comment => (\n          <Comment key={comment.id} comment={comment} />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { User } from '../User';\nimport { Post} from '../Post';\nimport { CommentList } from '../CommentList';\n\ninterface Props {\n  posts: PostWithUserAndComment[];\n}\n\nexport const PostList: FC<Props> = (props) => {\n  const { posts } = props;\n\n  return (\n    <div>\n      {posts.map(post => (\n        <div key={post.id} className=\"box\">\n          <User user={post.user} />\n          <Post post={post} />\n          <CommentList comments={post.comments} />\n        </div>\n      ))}\n    </div>\n  );\n};\n","const URL_MAIN = 'https://jsonplaceholder.typicode.com/';\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(`${URL_MAIN}${url}`);\n\n  return response.json();\n};\n\nconst getPosts = (): Promise<Post[]> => {\n  return getData('posts');\n};\n\nconst getUsers = (): Promise<User[]> => {\n  return getData('users');\n};\n\nconst getComments = (): Promise<Comment[]> => {\n  return getData('comments');\n};\n\nexport const getPostsWithUsersAndComments = async (): Promise<PostWithUserAndComment[]> => {\n  const posts = await getPosts();\n  const users = await getUsers();\n  const commentsToPost = await getComments();\n\n  return posts.map((post: Post) => {\n    const user = users.find((person: User) => person.id === post.userId) as User;\n    const comments = commentsToPost\n      .filter((message: Comment) => message.postId === post.userId) as Comment[];\n\n    return {\n      ...post,\n      user,\n      comments,\n    };\n  });\n};\n","import React, {\n  ChangeEvent, useState, FC, useMemo,\n} from 'react';\nimport './App.css';\nimport { PostList } from './components/PostList';\nimport { getPostsWithUsersAndComments } from './components/getData/getData';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<PostWithUserAndComment[]>([]);\n  const [originalPosts, setOriginalPosts] = useState<PostWithUserAndComment[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [text, setText] = useState('');\n\n  const handleStart = async () => {\n    setIsLoading(true);\n    const postsFromServer = await getPostsWithUsersAndComments();\n\n    setOriginalPosts(postsFromServer);\n    setPosts(postsFromServer);\n    setIsLoading(false);\n  };\n\n  const handleInput = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    setText(target.value.toLowerCase());\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setText('');\n  };\n\n  useMemo(() => {\n    setPosts(originalPosts\n      .filter(post => post.title.toLowerCase().includes(text)\n        || post.body.toLowerCase().includes(text)));\n  }, [text]);\n\n  if (isLoading) {\n    return (\n      <div className=\"title\">\n        <p>Loading...</p>\n      </div>\n    );\n  }\n\n  if (!originalPosts.length) {\n    return (\n      <div className=\"title\">\n        <button type=\"button\" onClick={handleStart}>Load</button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"title is-1 is-spaced\">Dynamic list of posts</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <input\n            className=\"input is-medium\"\n            placeholder=\"Find posts\"\n            onChange={handleInput}\n            value={text}\n            type=\"text\"\n          />\n        </div>\n      </form>\n      <PostList posts={posts} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}